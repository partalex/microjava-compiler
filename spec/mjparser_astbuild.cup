package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, CONST, IF, WHILE, NEW, ELSE, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE, QUESTION, DOUBLEDOT;
terminal EQUALSTO, DIFFERENT, GREATER, EGREATER, LESS, ELESS, AND, OR;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, PLUSPLUS, MINUSMINUS;
terminal String BOOL;
terminal Integer NUMBER;
terminal String IDENT;
terminal String CHAR;

nonterminal RelOp RelOp;
nonterminal AssignOp AssignOp;
nonterminal OptMinus OptMinus;
nonterminal OptNumPrint OptNumPrint;
nonterminal Question Question;
nonterminal Doubledot Doubledot;
nonterminal OptActPartsOpt OptActPartsOpt;
nonterminal OptExpr OptExpr;
nonterminal ActParts ActParts;
nonterminal ActPartsOpt ActPartsOpt;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal OptionalExtends OptionalExtends;
nonterminal FieldList FieldList;
nonterminal Methods Methods;
nonterminal Field Field;
nonterminal FormParamList FormParamList;
nonterminal Statements Statements;
nonterminal FormalParam FormalParam;
nonterminal FormParams FormParams;
nonterminal FormParamsComma FormParamsComma;
nonterminal MulOp MulOp;
nonterminal While While;
nonterminal VarDecl VarDecl;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal AddOp AddOp;
nonterminal Unmatched Unmatched;
nonterminal Matched Matched;
nonterminal StaticDeclList StaticDeclList;
nonterminal GlobalStart GlobalStart;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstType ConstType;
nonterminal ConstList ConstList;
nonterminal VarList VarList;
nonterminal VarListComma VarListComma;
nonterminal OptionalArray OptionalArray;
nonterminal If If;
nonterminal Else Else;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName, StaticDecl, ClassName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDeclaration, VarDeclaration, Method, DesigParts, DesigAdditional, DesigName;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList, ConstVal, VarType, MethodType;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondTernary, Ternary, Condition, ExprNonTer, AddTerm, CondFact, CondTerm;

Program 		    ::= (Program) PROG ProgName:P1 StaticDeclList:S2 GlobalStart:G3 MethodDeclList:M4 RBRACE {: RESULT=new Program(P1, S2, G3, M4); RESULT.setLine(P1left); :};

GlobalStart 	    ::= (GlobalStart) LBRACE {: RESULT=new GlobalStart(); :};

ProgName 		    ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

StaticDeclList 	    ::= (StatictDeclList) StaticDeclList:S1 StaticDecl:S2 {: RESULT=new StatictDeclList(S1, S2); RESULT.setLine(S1left); :}
					    |
					    (NoStaticDecl) {: RESULT=new NoStaticDecl(); :};

StaticDecl 			::= (ConstDecls) CONST ConstType:C1 ConstList:C2 SEMI {: RESULT=new ConstDecls(C1, C2); RESULT.setLine(C1left); :}
					    |
					    (VarDecls) VarType:V1 VarList:V2 SEMI {: RESULT=new VarDecls(V1, V2); RESULT.setLine(V1left); :}
					    |
					    error SEMI:l {: parser.report_error("Sintaksa greska deklaracije globalne promenljive na liniji " + lleft, null); :} {: RESULT=new StaticDeclDerived1(); :}
					    |
					    (ClassDecls) CLASS ClassName:C1 OptionalExtends:O2 FieldList:F3 Methods:M4 RBRACE {: RESULT=new ClassDecls(C1, O2, F3, M4); RESULT.setLine(C1left); :};
// TODO - dodati ctor

ConstType		    ::= (ConstType) Type:T1 {: RESULT=new ConstType(T1); RESULT.setLine(T1left); :};

ClassName		    ::= (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};

ConstList 		    ::= (ConstListDecl) ConstList:C1 COMMA ConstDeclaration:C2 {: RESULT=new ConstListDecl(C1, C2); RESULT.setLine(C1left); :}
				        |
				        (ConstD) ConstDeclaration:C1 {: RESULT=new ConstD(C1); RESULT.setLine(C1left); :};

ConstDeclaration    ::= (ConstDeclaration) IDENT:constName EQUAL ConstVal:constVal {: RESULT=new ConstDeclaration(constName, constVal); RESULT.setLine(constNameleft); :};

VarList 			::= (VarListDecl) VarListComma:V1 VarDeclaration:V2 {: RESULT=new VarListDecl(V1, V2); RESULT.setLine(V1left); :};

VarListComma		::= (VarListCom) VarList:V1 COMMA {: RESULT=new VarListCom(V1); RESULT.setLine(V1left); :}
                        |
                        error COMMA:l {: parser.report_error("Sintaksa greska deklaracije promenljive na liniji " + lleft, null); :} {: RESULT=new VarListCommaDerived1(); :};

VarType 			::= (VarType) Type:T1 {: RESULT=new VarType(T1); RESULT.setLine(T1left); :};

VarDeclaration 		::= (VarDeclaration) IDENT:varName OptionalArray:O1 {: RESULT=new VarDeclaration(varName, O1); RESULT.setLine(varNameleft); :};

OptionalArray		::= (Array) LSQBRACE RSQBRACE {: RESULT=new Array(); :}
					    |
					    (NoArray) {: RESULT=new NoArray(); :};

OptionalExtends 	::= (Extends) EXTENDS Type:T1 LBRACE {: RESULT=new Extends(T1); RESULT.setLine(T1left); :}
					    |
					    (NoExtends) LBRACE {: RESULT=new NoExtends(); :}
					    |
					    error LBRACE:l {: parser.report_error("Sintaksa greska extends na liniji " + lleft, null); :} {: RESULT=new OptionalExtendsDerived1(); :};

FieldList			::= (FieldDecls) Field:F1 FieldList:F2 {: RESULT=new FieldDecls(F1, F2); RESULT.setLine(F1left); :}
					    |
					    (NoFieldDecl) {: RESULT=new NoFieldDecl(); :};

Field				::= (Fld)  VarType:V1 VarList:V2 SEMI {: RESULT=new Fld(V1, V2); RESULT.setLine(V1left); :}
					    |
					    error SEMI:l {: parser.report_error("Sintaksa greska field decl na liniji " + lleft, null); :} {: RESULT=new FieldDerived1(); :};

Methods				::= (MethodsClass) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new MethodsClass(M1); RESULT.setLine(M1left); :}
					    |
					    (NoMethods) {: RESULT=new NoMethods(); :};

MethodDeclList		::= (MethodDeclarations) MethodDeclList:M1 Method:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					    |
					    (NoMethodDecar) {: RESULT=new NoMethodDecar(); :};

Method				::= (MethodDec) MethodTypeName:M1 FormParamList:F2 FieldList:F3 LBRACE Statements:S4 RBRACE {: RESULT=new MethodDec(M1, F2, F3, S4); RESULT.setLine(M1left); :};

MethodTypeName		::= (MethodTypeName) MethodType:M1 IDENT:methName {: RESULT=new MethodTypeName(M1, methName); RESULT.setLine(M1left); :};

FormParamList		::= (FormParamL) LPAREN FormParams:F1 RPAREN {: RESULT=new FormParamL(F1); RESULT.setLine(F1left); :}
					    |
					    (NoFromParam) LPAREN RPAREN {: RESULT=new NoFromParam(); :}
					    |
					    LPAREN error RPAREN:l {: parser.report_error("Izvrsen oporavak do ) formalni parametar u liniji " + lleft, null); :} {: RESULT=new FormParamListDerived1(); :} ;

FormParams			::= (FormParametrs) FormParamsComma:F1 FormalParam:F2 {: RESULT=new FormParametrs(F1, F2); RESULT.setLine(F1left); :}
                        |
					    (FormPar) FormalParam:F1 {: RESULT=new FormPar(F1); RESULT.setLine(F1left); :};

FormParamsComma		::= (FormParamsCom) FormParams:F1 COMMA {: RESULT=new FormParamsCom(F1); RESULT.setLine(F1left); :}
					    |
					    error COMMA:l {: parser.report_error("Izvrsen oporavak do , formalni parametar u liniji " + lleft, null); :} {: RESULT=new FormParamsCommaDerived1(); :};

FormalParam			::= (FormalPar) Type:T1 IDENT:formalParamName OptionalArray:O2 {: RESULT=new FormalPar(T1, formalParamName, O2); RESULT.setLine(T1left); :};

MethodType			::= (TVoid) VOID {: RESULT=new TVoid(); :}
					    |
					    (MType) Type:T1 {: RESULT=new MType(T1); RESULT.setLine(T1left); :};

Type                ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

ConstVal 		    ::= (NumConst) NUMBER:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :}
				        |
				        (CharConst) CHAR:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :}
				        |
				        (BoolConst) BOOL:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :};

Statement           ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
                        |
                        (UnmachedStmt) Unmatched:U1 {: RESULT=new UnmachedStmt(U1); RESULT.setLine(U1left); :};

Unmatched           ::= (UnmatchedIf) If:I1 CondTernary:C2 Statement:S3 {: RESULT=new UnmatchedIf(I1, C2, S3); RESULT.setLine(I1left); :}
                        |
                        (UnmatchedElse) If:I1 CondTernary:C2 Matched:M3 Else:E4 Unmatched:U5 {: RESULT=new UnmatchedElse(I1, C2, M3, E4, U5); RESULT.setLine(I1left); :};

If					::= (If) IF {: RESULT=new If(); :};

Else 				::= (Else) ELSE {: RESULT=new Else(); :};

Matched 			::= (StatementD) DesignatorStatement:D1 SEMI {: RESULT=new StatementD(D1); RESULT.setLine(D1left); :}
                        |
                        error SEMI:l {: parser.report_error("Izvrsen oporavak zbog lose dodele do ; u liniji " + lleft, null); :} {: RESULT=new MatchedDerived1(); :}
                        |
                        (StatementIf) If:I1 CondTernary:C2 Matched:M3 Else:E4 Matched:M5 {: RESULT=new StatementIf(I1, C2, M3, E4, M5); RESULT.setLine(I1left); :}
                        |
                        (StatementBreak) BREAK SEMI {: RESULT=new StatementBreak(); :}
                        |
                        (StatementContinue) CONTINUE SEMI {: RESULT=new StatementContinue(); :}
                        |
                        (StatementReturn) RETURN OptExpr:O1 SEMI {: RESULT=new StatementReturn(O1); RESULT.setLine(O1left); :}
                        |
                        (StatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
                        |
                        (StatementPrint) PRINT LPAREN Expr:E1 OptNumPrint:O2 RPAREN SEMI {: RESULT=new StatementPrint(E1, O2); RESULT.setLine(E1left); :}
                        |
                        (StatementStatement) LBRACE Statements:S1 RBRACE {: RESULT=new StatementStatement(S1); RESULT.setLine(S1left); :};
// TODO - Dodati foraech

Statements			::= (StatementsNew) Statements:S1 Statement:S2 {: RESULT=new StatementsNew(S1, S2); RESULT.setLine(S1left); :}
					    |
					    (NoStatements) {: RESULT=new NoStatements(); :};

While				::= (While) WHILE {: RESULT=new While(); :};

DesignatorStatement ::= (DesigAssign) Designator:D1 AssignOp:A2 Expr:E3 {: RESULT=new DesigAssign(D1, A2, E3); RESULT.setLine(D1left); :}
					    |
					    (DesigMethod) Designator:D1 LPAREN ActPartsOpt:A2 RPAREN {: RESULT=new DesigMethod(D1, A2); RESULT.setLine(D1left); :}
                        |
                        (DesigPlusPlus) Designator:D1 PLUSPLUS {: RESULT=new DesigPlusPlus(D1); RESULT.setLine(D1left); :}
					    |
					    (DesigMinusMinus) Designator:D1 MINUSMINUS {: RESULT=new DesigMinusMinus(D1); RESULT.setLine(D1left); :};

Designator			::= (Designator) DesigName:D1 DesigAdditional:D2 {: RESULT=new Designator(D1, D2); RESULT.setLine(D1left); :};

DesigName			::= (DesigName) IDENT:desigName {: RESULT=new DesigName(desigName); RESULT.setLine(desigNameleft); :};

DesigAdditional		::= (DesigAddit) DesigAdditional:D1 DesigParts:D2 {: RESULT=new DesigAddit(D1, D2); RESULT.setLine(D1left); :}
					    |
					    (NoDesigAddit) {: RESULT=new NoDesigAddit(); :};

DesigParts			::= (DesigId) DOT IDENT:partName {: RESULT=new DesigId(partName); RESULT.setLine(partNameleft); :}
					    |
					    (DesigArr) LSQBRACE Expr:E1 RSQBRACE {: RESULT=new DesigArr(E1); RESULT.setLine(E1left); :};

OptActPartsOpt		::= (OActPO) LPAREN ActPartsOpt:A1 RPAREN {: RESULT=new OActPO(A1); RESULT.setLine(A1left); :}
					    |
					    (NoOptActParts) {: RESULT=new NoOptActParts(); :};

ActPartsOpt			::= (ActPartsO) ActParts:A1 {: RESULT=new ActPartsO(A1); RESULT.setLine(A1left); :}
					    |
					    (NoActParts) {: RESULT=new NoActParts(); :};

ActParts 			::= (ActPartsC) ActParts:A1 COMMA Expr:E2 {: RESULT=new ActPartsC(A1, E2); RESULT.setLine(A1left); :}
					    |
					    (ActPartsE) Expr:E1 {: RESULT=new ActPartsE(E1); RESULT.setLine(E1left); :};

OptExpr				::= (ExprO) Expr:E1 {: RESULT=new ExprO(E1); RESULT.setLine(E1left); :}
					    |
					    (NoExpr) {: RESULT=new NoExpr(); :};

AddTerm				::= (AddTermA) AddTerm:A1 AddOp:A2 Term:T3 {: RESULT=new AddTermA(A1, A2, T3); RESULT.setLine(A1left); :}
					    |
					    (NoAddTerm) {: RESULT=new NoAddTerm(); :};

Factor				::= (FactorDes) Designator:D1 OptActPartsOpt:O2 {: RESULT=new FactorDes(D1, O2); RESULT.setLine(D1left); :}
					    |
					    (FactorConst) ConstVal:C1 {: RESULT=new FactorConst(C1); RESULT.setLine(C1left); :}
					    |
					    (FactorNewClass) NEW Type:T1 {: RESULT=new FactorNewClass(T1); RESULT.setLine(T1left); :}
					    |
					    (FactorNewArray) NEW Type:T1 LSQBRACE Expr:E2 RSQBRACE {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
					    |
					    (FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :};

Term 				::= (TermM) Term:T1 MulOp:M2 Factor:F3 {: RESULT=new TermM(T1, M2, F3); RESULT.setLine(T1left); :}
					    |
					    (TermF) Factor:F1 {: RESULT=new TermF(F1); RESULT.setLine(F1left); :};

CondTernary			::=	(CondCond) LPAREN Condition:C1 RPAREN {: RESULT=new CondCond(C1); RESULT.setLine(C1left); :}
					    |
					    (CondTer) LPAREN Ternary:T1 RPAREN {: RESULT=new CondTer(T1); RESULT.setLine(T1left); :}
					    |
					    error RPAREN:l  {: parser.report_error("Sintaksna greska u uslovu na liniji " + lleft, null); :} {: RESULT=new CondTernaryDerived1(); :};

Condition 			::= (ConditionC) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionC(C1, C2); RESULT.setLine(C1left); :}
					    |
					    (ConditionT) CondTerm:C1 {: RESULT=new ConditionT(C1); RESULT.setLine(C1left); :};

CondTerm			::= (CondTermC) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermC(C1, C2); RESULT.setLine(C1left); :}
					    |
					    (CondTermT) CondFact:C1 {: RESULT=new CondTermT(C1); RESULT.setLine(C1left); :};

CondFact 			::= (CondFactE) ExprNonTer:E1 {: RESULT=new CondFactE(E1); RESULT.setLine(E1left); :}
					    |
					    (CondFactR) ExprNonTer:E1 RelOp:R2 ExprNonTer:E3 {: RESULT=new CondFactR(E1, R2, E3); RESULT.setLine(E1left); :};

Expr 				::= (ExprT) ExprNonTer:E1 {: RESULT=new ExprT(E1); RESULT.setLine(E1left); :}
					    |
					    (ExprCond) Ternary:T1 {: RESULT=new ExprCond(T1); RESULT.setLine(T1left); :};

ExprNonTer			::= (ExprNonT) OptMinus:O1 Term:T2 AddTerm:A3 {: RESULT=new ExprNonT(O1, T2, A3); RESULT.setLine(O1left); :};

Ternary				::= (Ternary) Condition:C1 Question:Q2 Expr:E3 Doubledot:D4 Expr:E5 {: RESULT=new Ternary(C1, Q2, E3, D4, E5); RESULT.setLine(C1left); :};

Question			::= (Question) QUESTION {: RESULT=new Question(); :};

Doubledot			::= (Doubledot) DOUBLEDOT {: RESULT=new Doubledot(); :};

OptNumPrint			::= (NumberPrint) COMMA NUMBER:N1 {: RESULT=new NumberPrint(N1); RESULT.setLine(N1left); :}
					    |
					    (NoNumPrint) {: RESULT=new NoNumPrint(); :};

OptMinus 			::= (OptMin) MINUS {: RESULT=new OptMin(); :}
					    |
					    (NoMinus) {: RESULT=new NoMinus(); :};

AssignOp			::= (AssignOpE) EQUAL {: RESULT=new AssignOpE(); :};

RelOp				::= (RelOpE) EQUALSTO {: RESULT=new RelOpE(); :}
					    |
					    (RelOpD) DIFFERENT {: RESULT=new RelOpD(); :}
					    |
					    (RelOpL) LESS {: RESULT=new RelOpL(); :}
					    |
						(RelOpEL) ELESS {: RESULT=new RelOpEL(); :}
					    |
					    (RelOpG) GREATER {: RESULT=new RelOpG(); :}
					    |
						(RelOpEG) EGREATER {: RESULT=new RelOpEG(); :};

AddOp               ::= (AddOpP) PLUS {: RESULT=new AddOpP(); :}
					    |
                        (AddOpM) MINUS {: RESULT=new AddOpM(); :};

MulOp				::= (MulOpM) MUL {: RESULT=new MulOpM(); :}
					    |
					    (MulOpD) DIV {: RESULT=new MulOpD(); :}
					    |
					    (MulOpMod) MOD {: RESULT=new MulOpMod(); :};