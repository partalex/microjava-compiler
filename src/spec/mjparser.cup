package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, CONTINUE, FOR, NAMESPACE;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUALSTO, DIFFERENT, GREATER, EGREATER, LESS, ELESS, AND, OR;
terminal EQUAL, PLUSPLUS, MINUSMINUS;
terminal SEMI, DOUBLEDOT, COMMA, LPAREN, RPAREN, LSQBRACE, RSQBRACE, LBRACE, RBRACE;
terminal LAMBDA, DOUBLECOLON;
terminal String BOOL;
terminal String CHAR;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal Scope;
nonterminal ConstDeclOpt;
nonterminal MethodDeclOpt;
nonterminal ConstDecl;
nonterminal ConstList;
nonterminal VarDecl;
nonterminal VarDeclOpt;
nonterminal FormParsOpt;
nonterminal FormPars;
nonterminal MinusOpt;
nonterminal ActParsOpt;
nonterminal DesignStmOpt;
nonterminal OptPrint;
nonterminal Statement;
nonterminal StatementOpt;
nonterminal DesignStmPart;
nonterminal DesignatorStm;
nonterminal ActPars;
nonterminal ActPartsOpt;
nonterminal ArrayOpt;
nonterminal ExprOpt;
nonterminal FactorParenParsOpt;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;
nonterminal VarDeclList;
nonterminal FormParsList;
nonterminal StatementCondition;
nonterminal For;
nonterminal CondStart;
nonterminal CondEnd;
nonterminal ForEnd;
nonterminal GlobalEnd;
nonterminal DesignStmManyStart;
nonterminal NamespaceEnd;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct MethodType;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ConstVal;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondTerm;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Struct AddTerm;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFactOpt;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Namespace;
nonterminal rs.etf.pp1.symboltable.concepts.Obj NamespaceOpt;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MatrixOpt;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ArraySize;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDeclPart;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarDeclPart;


nonterminal If;
nonterminal Else;

precedence left ELSE;

Program 		    ::= (Program) PROG ProgName NamespaceOpt NamespaceEnd ConstDeclOpt VarDeclOpt GlobalEnd MethodDeclOpt RBRACE;

ProgName 			::= (ProgName) IDENT:name;

NamespaceEnd        ::= (NamespaceEnd) /* epsilon */;

GlobalEnd		    ::= (GlobalEnd) LBRACE;

Namespace 		    ::= (Namespace) NAMESPACE IDENT:name LBRACE ConstDeclOpt VarDeclOpt LBRACE MethodDeclOpt RBRACE RBRACE;

NamespaceOpt        ::= (NamespaceMany) NamespaceOpt Namespace
                    |   (NamespaceZero) /* epsilon */;

MethodDeclOpt	    ::= (MethodDeclMany) MethodDeclOpt MethodDecl
					|	(MethodDeclZero) /* epsilon */;

ArrayOpt		    ::= (ArrayOne) LSQBRACE RSQBRACE
					|	(ArrayZero) /* epsilon */;

VarDeclPart         ::= (VarDeclPart) IDENT:name ArrayOpt;

VarDeclList         ::= (VarDeclListMany) VarDeclList COMMA VarDeclPart
                    |	(VarDeclListOne) VarDeclPart
                    |   error SEMI:l {: parser.report_error("Global variable declaration syntax error on line " + lleft, null); :};

ConstDeclOpt        ::= (ConstDeclMany) ConstDeclOpt ConstDecl
					|	(ConstDeclZero) /* epsilon */;

ConstDecl           ::= (ConstDecl) CONST Type ConstDeclPart SEMI;

ConstList           ::= (ConstListMany) ConstList COMMA ConstDeclPart
                    |   (ConstListOne) ConstDeclPart;

ConstDeclPart       ::= (ConstDeclPart) IDENT:name EQUAL ConstVal:value;

VarDecl             ::= (VarDecl) Type VarDeclList SEMI;

VarDeclOpt          ::= (VarDeclMany) VarDeclOpt VarDecl
                    |   (VarDeclZero) /* epsilon */;

MethodType			::= (MethodVoid) VOID
					|	(MethodTType) Type;

MethodDecl          ::= (MethodDecl) MethodType IDENT:name LPAREN FormParsOpt RPAREN VarDeclOpt LBRACE StatementOpt RBRACE;

FormParsOpt         ::= (FormParsOne) FormParsList
                    |   (FormParsZero) /* epsilon */;

FormParsList        ::= (FormParsListMany) FormParsList COMMA FormPars
                    |   (FormParsListOne) FormPars;

FormPars            ::= (FormPars) Type IDENT:name ArrayOpt;

Type                ::= (Type) IDENT:name;

StatementOpt        ::= (StatementOptMany) StatementOpt Statement
                    |   (StatementZero) /* epsilon */;

ExprOpt				::= (ExprOne) Expr
					| 	(ExprZero) /* epsilon */;

Statement           ::= (StatementDesignator) DesignatorStm SEMI
                    |   (StatementIf) If StatementCondition Statement
                    |   (StatementIfElse) If StatementCondition Statement Else Statement
                    |   (StatementBreak) BREAK SEMI
                    |   (StatementContinue) CONTINUE SEMI
                    |   (StatementReturn) RETURN ExprOpt SEMI
                    |   (StatementRead) READ LPAREN Designator RPAREN SEMI
                    |   (StatementPrint) PRINT LPAREN Expr OptPrint RPAREN SEMI
                    |   (StatementFor) For LPAREN DesignStmOpt CondStart CondFactOpt SEMI DesignStmOpt CondEnd Statement ForEnd
                    |   (StatementMany) LBRACE StatementOpt RBRACE;

StatementCondition  ::= (StatementCondition) LPAREN Condition RPAREN;

DesignStmOpt        ::= (DesignStmOptMany) DesignStmOpt COMMA DesignatorStm
                    |	(DesignStmOne) DesignatorStm
                    |	(DesignStmZero) /* epsilon */;

If					::= (If) IF;

Else 				::= (Else) ELSE;

For 				::= (For) FOR;

ForEnd              ::= (ForEnd) /* epsilon */;

CondStart 	        ::= (CondStart) SEMI;

CondEnd             ::= (CondEnd) RPAREN;

CondFactOpt         ::= (CondFactOptOne) CondFact
                    |	(CondFactZero) /* epsilon */;

OptPrint	        ::= (PrintOne) COMMA NUMBER
					|	(PrintZero) /* epsilon */;

DesignStmPart       ::= (DesignStmPartMany) DesignStmPart Designator COMMA
                    |   (DesignStmPartOne) DesignStmPart COMMA
                    |   (DesignStmPartZero) /* epsilon */;

DesignatorStm       ::= (DesignStmAssign) Designator Assignop Expr
                    |   (DesignStmParamslass) Designator LPAREN ActPartsOpt RPAREN
                    |   (DesignStmPlus) Designator PLUSPLUS
                    |   (DesignStmMinus) Designator MINUSMINUS
                    |   (DesignStmMany) DesignStmManyStart DesignStmPart MUL Designator RSQBRACE Assignop Designator;

DesignStmManyStart  ::= (DesignStmManyStart) LSQBRACE;

ActPartsOpt	        ::= (ActPartsOne) ActPars
					|	(ActPartsZero) /* epsilon */;

ActPars             ::= (ActParsMany) ActPars COMMA Expr
                    |   (ActParsOne) Expr;

Condition           ::= (ConditionMany) Condition OR CondTerm
                    |   (ConditionOne) CondTerm;

CondTerm            ::= (CondTermManyClass) CondTerm AND CondFact
                    |   (CondTermOneClass) CondFact;

CondFact            ::= (CondFactMany) Expr Relop Expr
                    |   (CondFactOne) Expr;

AddTerm				::= (AddTermMany) AddTerm Addop Term
					|	(AddTermZero) /* epsilon */;

Expr                ::= (Expr) MinusOpt Term AddTerm;

MinusOpt 			::= (Minus) MINUS
					|	(NoMinus) /* epsilon */;

Term                ::= (TermMany) Term Mulop Factor
                    |   (TermOne) Factor;

ConstVal 			::= (ConstValNum) NUMBER
					|	(ConstValChar) CHAR
					|	(ConstValBoo) BOOL;

Factor              ::= (FactorParenPars) Designator FactorParenParsOpt
                    |   (FactorConstVal) ConstVal
                    |   (FactorNewTypeExpr) NEW Type LSQBRACE Expr RSQBRACE
                    |   (FactorParenExpr) LPAREN Expr RPAREN;

FactorParenParsOpt  ::= (ParenPars) LPAREN ActParsOpt RPAREN
                    |   (ParenParsZero) /* epsilon */;

ActParsOpt          ::= (ActParsOptOne) ActPars
                    |   (ActParsZero) /* epsilon */;

Scope               ::= (ScopeNamespace) IDENT:namespace DOUBLECOLON IDENT:name
                    |   (ScopeLocal) IDENT:name;

Designator          ::= (Designator) Scope MatrixOpt;

MatrixOpt           ::= (MatrixMany) MatrixOpt ArraySize
                    |   (MatrixZero) /* epsilon */;

ArraySize			::= (ArraySize) LSQBRACE Expr RSQBRACE;

Assignop		    ::= (Assignop) EQUAL
                    |	error SEMI:l {: parser.report_error("Syntax assignment error on line " + lleft, null); :};

Relop				::= (RelopEqualsto) EQUALSTO
					|	(RelopDifferent) DIFFERENT
					|	(RelopLess) LESS
					|	(RelopEless) ELESS
					|	(RelopGreater) GREATER
					|	(RelopEgreater) EGREATER;

Addop				::= (AddopPlus) PLUS
					|	(AddopMinus) MINUS;

Mulop				::= (MulopMul) MUL
					| 	(MulopDiv) DIV
					|	(MulopMod) MOD;
