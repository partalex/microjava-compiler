package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CONST, IF, WHILE, NEW, ELSE, PRINT, READ, RETURN, VOID, CONTINUE;
terminal SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE, DOUBLEDOT;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, PLUSPLUS, MINUSMINUS, FOREACH, LAMBDA;
terminal EQUALSTO, DIFFERENT, GREATER, EGREATER, LESS, ELESS, AND, OR;
terminal Integer NUMBER;
terminal String IDENT;
terminal String BOOL;
terminal String CHAR;

// finished
nonterminal Program;
nonterminal ConstVarDeclList;
nonterminal ConstVal;
nonterminal OptionalArray;
nonterminal Type;
nonterminal VarDecl;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;
nonterminal FormPars;
nonterminal ActPars;
nonterminal Condition;
nonterminal CondFact;
nonterminal Term;
nonterminal Expr;
nonterminal CondTerm;
nonterminal Designator;
nonterminal Factor;
nonterminal MethodDecl;
nonterminal DesignatorStFirst;
nonterminal DesignatorStSec;
nonterminal DesignatorStatement;
nonterminal if;
nonterminal else;
nonterminal ConstDeclPart;
nonterminal ConstDecl;
nonterminal Statement;
nonterminal VarDeclOpt;
nonterminal StatementOneOrMany;
nonterminal ConstVarDecl;
nonterminal MethodDeclList;
nonterminal AddopTermMany;
nonterminal Label;
// TODO - new

Program 		    ::= (ProgramClass) PROG IDENT:program ConstVarDeclList LBRACE MethodDeclList RBRACE;

MethodDeclList		::= (MethodDeclListClass) MethodDeclList MethodDecl
					|	(MethodDeclListNoClass);

ConstVal 			::= (NumConstClass) NUMBER
					|	(CharConstClass) CHAR
					|	(BoolConstClass) BOOL;

ConstVarDeclList    ::= (ConstVarDeclClass) ConstVarDeclList ConstVarDecl
                    |   (ConstVarDeclNoClass);

ConstVarDecl        ::= (ConstVarDeclConstDeclClass) ConstDecl
                    |   (ConstVarDeclVarDeclClass) VarDecl;

OptionalArray	    ::= (ArrayClass) LSQBRACE RSQBRACE
				    |   (NoArrayClass);

Type                ::= (TypeClass) IDENT:type;

VarDecl             ::= (ManyVarDeclClass) Type IDENT:name OptionalArray VarDecl
                    |   (OneVarDeclClass) COMMA IDENT:name OptionalArray;

Assignop		    ::= (EqualClass) EQUAL;

Relop				::= (EqualstoClass) EQUALSTO
					|	(DifferentClass) DIFFERENT
					|	(LessClass) LESS
					|	(ElessClass) ELESS
					|	(GreaterClass) GREATER
					|	(EgreaterClass) EGREATER;

Addop				::= (PlusClass) PLUS
					|	(MinusClass) MINUS;

Mulop				::= (MulClass) MUL
					| 	(DivClass) DIV
					|	(ModClass) MOD;

FormPars            ::= (ManyFormParsClass) FormPars COMMA Type IDENT:name OptionalArray
                    |   (OneFormParsClass) Type IDENT:name OptionalArray;

ActPars             ::= (ManyActPars) ActPars COMMA Expr
                    |   (OneActPars) Expr;

Condition           ::= (ManyConditionClass) Condition OR CondTerm
                    |   (OneConditionClass) CondTerm;

CondTerm            ::= (ManyCondTermClass) CondTerm AND CondFact
                    |   (OneCondTermClass) CondFact;

CondFact            ::= (TwoCondFactClass) Expr Relop Expr
                    |   (OneCondFactClass) Expr;

Term                ::= (ManyTermClass) Term Mulop Factor
                    |   (OneTermClass) Factor Mulop Factor;

// TODO - Review start      --------------------------------------------------------------------------------------------
//Expr                ::= (ManyMinusExprClass) MINUS Term Expr
//                    |   (ManyExprClass) Expr Term
//                    |   (OneExprClass) Addop Term;

AddopTermMany       ::= (AddopTermOptClass) AddopTermMany Addop Term
                    |   (AddopTermOptClass) Addop Term;

Expr                ::= (ManyMinusExprClass) MINUS Term AddopTermMany
                    |   (ManyExprClass) MINUS Term
                    |   (ManyExprClass) Term AddopTermMany
                    |   (ManyExprClass) Term;
// TODO - Review end        --------------------------------------------------------------------------------------------

Designator          ::= (ManyDesignatorClass) IDENT Designator
                    |   (DotDesignatorClass) DOT IDENT
                    |   (BraceDesignatorClass) LSQBRACE Expr RSQBRACE;

Factor              ::= (FactorParenParsClass) Designator LPAREN ActPars RPAREN
                    |   (FactorParenClass) Designator LPAREN RPAREN
                    |   (FactorClass) Designator
                    |   (FactorConstValClass) ConstVal
                    |   (FactorNewTypeBraceClass) NEW Type LSQBRACE Expr RSQBRACE
                    |   (FactorNewTypeParenClass) NEW Type LPAREN ActPars RPAREN
                    |   (FactorNewTypeParenClass) NEW Type LPAREN RPAREN
                    |   (FactorParenExprClass) LPAREN Expr RPAREN;

StatementOneOrMany  ::= (ManyStatementOptClass) StatementOneOrMany Statement
                    |   (OneStatementOptClass) Statement;

VarDeclOpt          ::= (ManyStatementOptClass) VarDeclOpt VarDecl
                    |   (OneVarDeclOptOptClass) VarDecl;

MethodDecl          ::= (MethodDeclClass) Type IDENT LPAREN FormPars RPAREN VarDeclOpt LBRACE StatementOneOrMany RBRACE
                    |   (MethodDeclClass) VOID IDENT LPAREN FormPars RPAREN VarDeclOpt LBRACE StatementOneOrMany RBRACE
                    |   (MethodDeclClass) Type IDENT LPAREN RPAREN VarDeclOpt LBRACE StatementOneOrMany RBRACE
                    |   (MethodDeclClass) VOID IDENT LPAREN RPAREN VarDeclOpt LBRACE StatementOneOrMany RBRACE;

DesignatorStatement ::= (DesignatorStFirstClass) Designator Assignop Expr
                    |   (DesignatorStFirstClass) Designator LPAREN RPAREN
                    |   (DesignatorStFirstClass) Designator LPAREN ActPars RPAREN
                    |   (DesignatorStFirstClass) Designator PLUSPLUS
                    |   (DesignatorStFirstClass) Designator MINUSMINUS;

if					::= (IfClass) IF;

else 				::= (ElseClass) ELSE;

ConstDecl           ::= (ConstDeclClass) CONST Type ConstDeclPart SEMI;

ConstDeclPart       ::= (ManyConstDeclPartClass) IDENT:name EQUAL ConstVal:value COMMA ConstDeclPart
                    |   (OneConstDeclPartClass) IDENT:name EQUAL ConstVal:value;

Label               ::= (LabelClass) IDENT:name;

// TODO - Conflict start    --------------------------------------------------------------------------------------------
Statement           ::= (StatementDesignatorClass) DesignatorStatement SEMI
                    |   (StatementIfClass) if LPAREN Condition RPAREN Statement
//                    |   (StatementIfElseClass) if LPAREN Condition RPAREN Statement else Statement  // TODO - conflict
//                    |   (StatementIfElseClass) Statemtn else Statement                              // TODO - Zakomentarisno ne pravi konflikte
                    |   (StatementWhileClass) WHILE LPAREN Condition RPAREN Statement
                    |   (StatementBreakClass) BREAK SEMI
                    |   (StatementContinueClass) CONTINUE SEMI
                    |   (StatementExprClass) RETURN Expr SEMI
                    |   (StatementReturnClass) RETURN SEMI
                    |   (StatementReadClass) READ LPAREN Designator RPAREN SEMI
                    |   (StatementPrintManyExprClass) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
                    |   (StatementPrintOneExprClass) PRINT LPAREN Expr RPAREN SEMI
                    |   (StatementStatementManyClass) LBRACE StatementOneOrMany RBRACE
                    |   (StatementEmptyClass) LBRACE RBRACE;

//                    | Designator "." "foreach" "(" ident "=>" Statement ")" ";" * za B i C nivo
// TODO - Conflict end  ------------------------------------------------------------------------------------------------