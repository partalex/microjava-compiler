package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, CONTINUE, FOR, NAMESPACE;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUALSTO, DIFFERENT, GREATER, EGREATER, LESS, ELESS, AND, OR;
terminal EQUAL, PLUSPLUS, MINUSMINUS;
terminal SEMI, DOUBLEDOT, COMMA, LPAREN, RPAREN, LSQBRACE, RSQBRACE, LBRACE, RBRACE;
terminal LAMBDA, DOUBLECOLON;
terminal String BOOL;
terminal String CHAR;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal VarDeclPart;
nonterminal VarDecl;
nonterminal VarDeclOpt;
nonterminal FormParsOptOne;
nonterminal StatementOptMany;
nonterminal MethodDecl;
nonterminal FormPars;
nonterminal Type;
nonterminal Statement; // not defined
nonterminal Term;
nonterminal DesignatorStatePart;
nonterminal DesignatorStatement;
nonterminal ActPars;
nonterminal Condition;
nonterminal CondTerm;
nonterminal CondFact;
nonterminal Expr;
nonterminal ConstVal;
nonterminal Factor;
nonterminal Designator;
nonterminal Label;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;

VarDeclPart         ::= (ManyVarDeclClass) Type IDENT:name
                    |	(ManyVarDeclClass) Type IDENT:name LSQBRACE RSQBRACE
                    |	(ManyVarDeclClass) VarDeclPart COMMA IDENT:name
                    |	(ManyVarDeclClass) VarDeclPart COMMA IDENT:name LSQBRACE RSQBRACE;

VarDecl             ::= (VarDeclClass) VarDeclPart SEMI;

FormParsOptOne      ::= (FormParsOptOneClass) FormPars
                    |   (FormParsOptOneNoClass) /* epsilon */;

VarDeclOpt          ::= (VarDeclOptClass) VarDeclOpt VarDecl
                    |   (VarDeclOptNoClass) /* epsilon */;

StatementOptMany    ::= (StatementOptClass) StatementOptMany Statement
                    |   (StatementOptNoClass) /* epsilon */;

MethodDecl          ::= (MethodDeclTypeClass) Type IDENT LPAREN FormParsOptOne RPAREN VarDeclOpt LBRACE StatementOptMany RBRACE
                    |   (MethodDeclVoidClass) VOID IDENT LPAREN FormParsOptOne RPAREN VarDeclOpt LBRACE StatementOptMany RBRACE;

FormPars            ::= (ManyFormParsClass) Type IDENT:name
                    |	(ManyFormParsClass) Type IDENT:name LSQBRACE RSQBRACE
                    |	(ManyFormParsClass) FormPars COMMA Type IDENT:name
                    |	(ManyFormParsClass) FormPars COMMA Type IDENT:name LSQBRACE RSQBRACE;

Type                ::= (TypeNamespaceClass) IDENT:namespace DOUBLECOLON IDENT:type
                    |	(TypeClass) IDENT:type;

// TODO - Review start      --------------------------------------------------------------------------------------------
// TODO - Review end        --------------------------------------------------------------------------------------------

DesignatorStatePart ::= (DesignatorStatementPartClass ) COMMA
                    |   (DesignatorStFirstClass) Designator COMMA
                    |   (DesignatorStFirstClass) COMMA DesignatorStatePart
                    |   (DesignatorStFirstClass) Designator COMMA DesignatorStatePart
                    |   (DesignatorStFirstClass) /* epsilon */;

DesignatorStatement ::= (DesignatorStFirstClass) Designator Assignop Expr
                    |   (DesignatorStFirstClass) Designator LPAREN RPAREN
                    |   (DesignatorStFirstClass) Designator LPAREN ActPars RPAREN
                    |   (DesignatorStFirstClass) Designator PLUSPLUS
                    |   (DesignatorStFirstClass) Designator MINUSMINUS
                    |   (DesignatorStFirstClass) LSQBRACE DesignatorStatePart MUL Designator RSQBRACE Assignop Designator
                    ;

ActPars             ::= (ManyActPars) ActPars COMMA Expr
                    |   (OneActPars) Expr;

Condition           ::= (ManyConditionClass) Condition OR CondTerm
                    |   (OneConditionClass) CondTerm;

CondTerm            ::= (ManyCondTermClass) CondTerm AND CondFact
                    |   (OneCondTermClass) CondFact;

CondFact            ::= (TwoCondFactClass) Expr Relop Expr
                    |   (OneCondFactClass) Expr;

Expr                ::= (ManyMinusExprClass) MINUS Term
                    |   (ManyExprClass) Expr Addop Term
                    |   (OneExprClass) Term;

Term                ::= (ManyTermClass) Term Mulop Factor
                    |   (OneTermClass) Factor;

ConstVal 			::= (NumConstClass) NUMBER
					|	(CharConstClass) CHAR
					|	(BoolConstClass) BOOL;

Factor              ::= (FactorParenParsClass) Designator LPAREN ActPars RPAREN
                    |   (FactorParenClass) Designator LPAREN RPAREN
                    |   (FactorClass) Designator
                    |   (FactorConstValClass) ConstVal
                    |   (FactorNewTypeBraceClass) NEW Type LSQBRACE Expr RSQBRACE // new Type [ Expr ].
                    |   (FactorNewTypeParenClass) NEW Type LPAREN ActPars RPAREN // new Type ( ActPars )
                    |   (FactorNewTypeParenClass) NEW Type LPAREN RPAREN // new Type () // ovo nema smila za ne C
                    |   (FactorParenExprClass) LPAREN Expr RPAREN; // new Type ( Expr )

Designator          ::= (DesignatorManyClass) Designator LSQBRACE Expr RSQBRACE
                    |	(DesignatorManyClass) Type IDENT:name;

Label               ::= (LabelClass) IDENT:name;

Assignop		    ::= (EqualClass) EQUAL;

Relop				::= (EqualstoClass) EQUALSTO
					|	(DifferentClass) DIFFERENT
					|	(LessClass) LESS
					|	(ElessClass) ELESS
					|	(GreaterClass) GREATER
					|	(EgreaterClass) EGREATER;

Addop				::= (PlusClass) PLUS
					|	(MinusClass) MINUS;

Mulop				::= (MulClass) MUL
					| 	(DivClass) DIV
					|	(ModClass) MOD;
