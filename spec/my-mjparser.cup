package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, CONST, IF, WHILE, NEW, ELSE, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE, QUESTION, DOUBLEDOT;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, PLUSPLUS, MINUSMINUS, FOREACH, LAMBDA;
terminal EQUALSTO, DIFFERENT, GREATER, EGREATER, LESS, ELESS, AND, OR;
terminal String BOOL;
terminal Integer NUMBER;
terminal String IDENT;
terminal String CHAR;

// finished
nonterminal Program;
nonterminal StaticDecl;
nonterminal ConstVal;
nonterminal OptionalArray;
nonterminal Type;
nonterminal VarDecl;
nonterminal VarDeclOne;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;

// TODO - new
nonterminal MethodDecl;
nonterminal ConstDecl;
nonterminal ClassDecl;

Program 		    ::= (ProgramClass) PROG IDENT:program StaticDecl LBRACE MethodDecl RBRACE;

ConstVal 			::= (NumConstClass) NUMBER
					|	(CharConstClass) CHAR
					|	(BoolConstClass) BOOL;

StaticDecl          ::= (StaticDeclClass) ConstDecl VarDecl ClassDecl;

OptionalArray	    ::= (ArrayClass) LSQBRACE RSQBRACE
				    |   (NoArrayClass);

Type                ::= (TypeClass) IDENT:type;

ConstDecl           ::= (ConstDeclClass) CONST Type EQUAL ConstVal:value;

VarDecl             ::= (VarDeclClass) VarDecl COMMA VarDeclOne
                    |   (VarDeclClass) VarDeclOne;

VarDeclOne          ::= (VarDeclOneClass) Type IDENT:name OptionalArray;

Assignop		    ::= (EqualClass) EQUAL;

Relop				::= (EqualstoClass) EQUALSTO
					|	(DifferentClass) DIFFERENT
					|	(LessClass) LESS
					|	(ElessClass) ELESS
					|	(GreaterClass) GREATER
					|	(EgreaterClass) EGREATER;

Addop				::= (PlusClass) PLUS
					|	(MinusClass) MINUS;

Mulop				::= (MulClass) MUL
					| 	(DivClass) DIV
					|	(ModClass) MOD;


// TODO - down
